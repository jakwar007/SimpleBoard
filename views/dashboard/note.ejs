<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script>
    marked.setOptions({
        breaks: true,
        gfm: true,
        langPrefix: 'language-',
        pedantic: false,
        smartLists: true,
        smartypants: true,
        xhtml: false,
        highlight: function(code, lang) {
            return code;
        }
    });

</script>
<div class="max-w-7xl mx-auto my-6 px-4">
    <div class="bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden">
        <div class="border-b border-gray-100">
            <div class="p-4 sm:p-5">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                    <h1 class="text-xl sm:text-2xl font-semibold m-0 line-clamp-1 text-gray-800" id="note-title" contenteditable="false"><%= note.title %></h1>
                    <div class="flex flex-wrap gap-3">
                        <div class="flex-toolbar hidden">
                            <div class="flex items-center gap-1 bg-gray-50/80 p-1.5 rounded-lg border border-gray-100 backdrop-blur-sm order-last sm:order-first shadow-sm">
                                <button class="group hover:bg-white p-2 rounded-md transition-all duration-200 text-gray-600 hover:text-gray-900 hover:shadow-sm active:scale-95" title="Pogrubienie" id="boldBtn">
                                    <span class="text-lg group-hover:-translate-y-0.5 transition-transform duration-200 inline-block">ùêÅ</span>
                                </button>
                                <button class="group hover:bg-white p-2 rounded-md transition-all duration-200 text-gray-600 hover:text-gray-900 hover:shadow-sm active:scale-95" title="Kursywa" id="italicBtn">
                                    <span class="text-lg group-hover:-translate-y-0.5 transition-transform duration-200 inline-block">ùëñ</span>
                                </button>
                                <button class="group hover:bg-white p-2 rounded-md transition-all duration-200 text-gray-600 hover:text-gray-900 hover:shadow-sm active:scale-95" title="Lista" id="listBtn">
                                    <span class="group-hover:-translate-y-0.5 transition-transform duration-200 inline-block">‚Ä¢</span>
                                </button>
                                <button class="group hover:bg-white p-2 rounded-md transition-all duration-200 text-gray-600 hover:text-gray-900 hover:shadow-sm active:scale-95" title="Kod" id="codeBtn">
                                    <span class="font-mono text-sm group-hover:-translate-y-0.5 transition-transform duration-200 inline-block">{ }</span>
                                </button>
                            </div>
                        </div>
                        <div class="flex flex-wrap gap-2">
                            <button class="group flex items-center gap-2 px-4 py-2 bg-gray-50/80 rounded-lg hover:bg-white transition-all duration-200 text-sm text-gray-700 border border-gray-100 hover:border-gray-200 hover:shadow-sm active:scale-95" id="editBtn">
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">‚úèÔ∏è</span>
                                <span class="edit-text group-hover:-translate-y-0.5 transition-transform duration-200">Edytuj</span>
                            </button>
                            <button class="group flex items-center gap-2 px-4 py-2 bg-gray-50/80 rounded-lg hover:bg-white transition-all duration-200 text-sm text-gray-700 border border-gray-100 hover:border-gray-200 hover:shadow-sm active:scale-95" id="copyBtn">
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">üìã</span>
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">Kopiuj</span>
                            </button>
                            <button class="group flex items-center gap-2 px-4 py-2 bg-gray-50/80 rounded-lg hover:bg-white transition-all duration-200 text-sm text-gray-700 border border-gray-100 hover:border-gray-200 hover:shadow-sm active:scale-95" id="shareBtn">
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">üì§</span>
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">Udostƒôpnij</span>
                            </button>
<!--                            <div class="tags-container flex flex-wrap gap-2 mt-3 hidden">-->
<!--                                <div class="tags-display flex flex-wrap gap-1.5"></div>-->
<!--                                <div class="tags-editor hidden">-->
<!--                                    <div class="flex items-center gap-2">-->
<!--                                        <div class="relative">-->
<!--                                            <input type="text"-->
<!--                                                   class="tags-input px-3 py-1.5 text-sm border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500/50"-->
<!--                                                   placeholder="Dodaj tag...">-->
<!--                                            <div class="tags-suggestions absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg hidden max-h-48 overflow-y-auto z-10"></div>-->
<!--                                        </div>-->
<!--                                    </div>-->
<!--                                </div>-->
<!--                            </div>-->
                            <button class="save-btn hidden group flex items-center gap-1.5 px-3 py-1.5 bg-blue-50/80 rounded-lg hover:bg-blue-100 transition-all duration-200 text-xs text-blue-700 border border-blue-200 hover:border-blue-300 hover:shadow-sm active:scale-95">
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">üíæ</span>
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">Zapisz</span>
                            </button>
                            <button class="cancel-btn hidden group flex items-center gap-1.5 px-3 py-1.5 bg-red-50/80 rounded-lg hover:bg-red-100 transition-all duration-200 text-xs text-red-700 border border-red-200 hover:border-red-300 hover:shadow-sm active:scale-95">
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">‚ùå</span>
                                <span class="group-hover:-translate-y-0.5 transition-transform duration-200">Anuluj</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="p-5 sm:p-6">
            <div id="markdown-content" class="prose prose-sm sm:prose-base max-w-none prose-headings:text-gray-800 prose-p:text-gray-600 prose-pre:bg-gray-50/50 prose-pre:p-4 prose-pre:border prose-pre:border-gray-100 prose-pre:rounded-xl prose-code:text-gray-800 prose-code:bg-gray-50/50 prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded-md prose-code:border prose-code:border-gray-100 prose-code:before:content-none prose-code:after:content-none"></div>
            <textarea id="markdown-editor" class="hidden w-full min-h-[200px] p-4 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500/50 transition-all duration-200 font-mono text-sm"></textarea>
        </div>

        <div class="px-5 sm:px-6 py-4 border-t border-gray-100 bg-gray-50/30">
            <div class="text-xs sm:text-sm text-gray-500">
                Ostatnia aktualizacja: <span id="updateDate" class="text-gray-600 font-medium"><%= new Date(note.updatedAt).toLocaleDateString('pl') %></span>
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function() {
        let content = `<%= note.content %>`;
        let isEditing = false;
        let originalContent = content;
        const noteId = '<%= note.id %>';
        <!--let currentTags = <%= JSON.stringify(note.tags || []) %>;-->
        <!--let allTags = [];-->


        $('#markdown-content').html(DOMPurify.sanitize(marked.parse(content)));

        // function fetchAllTags() {
        //     $.ajax({
        //         url: '/api/tags',
        //         type: 'GET',
        //         success: function(tags) {
        //             allTags = tags;
        //             renderTagSuggestions('');
        //         }
        //     });
        // }

        // function renderTags(isEditing = false) {
        //     const $tagsDisplay = $('.tags-display').empty();
        //
        //     currentTags.forEach(tag => {
        //         const $tag = $(`
        //     <span class="tag inline-flex items-center gap-1.5 px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded-md text-xs text-gray-700 transition-colors duration-200">
        //         ${tag}
        //         ${isEditing ? '<button class="remove-tag text-gray-400 hover:text-gray-600">√ó</button>' : ''}
        //     </span>
        // `);
        //         $tagsDisplay.append($tag);
        //     });
        // }

        // function renderTagSuggestions(query) {
        //     const $suggestions = $('.tags-suggestions').empty();
        //     const filteredTags = allTags
        //         .filter(tag => tag.name.toLowerCase().includes(query.toLowerCase()))
        //         .filter(tag => !currentTags.includes(tag.name));
        //
        //     if (filteredTags.length === 0) {
        //         $suggestions.addClass('hidden');
        //         return;
        //     }
        //
        //     filteredTags.forEach(tag => {
        //         const $suggestion = $(`
        //     <div class="suggestion p-2 hover:bg-gray-50 cursor-pointer text-sm">
        //         ${tag.name}
        //     </div>
        // `);
        //         $suggestion.click(() => {
        //             addTag(tag.name);
        //             $('.tags-input').val('');
        //             $suggestions.addClass('hidden');
        //         });
        //         $suggestions.append($suggestion);
        //     });
        //
        //     $suggestions.removeClass('hidden');
        // }
        //
        // function addTag(tagName) {
        //     if (!currentTags.includes(tagName)) {
        //         currentTags.push(tagName);
        //         renderTags(true);
        //     }
        // }

        function enableEditing() {
            isEditing = true;
            $('.flex-toolbar').removeClass('hidden');
            $('#markdown-content').addClass('hidden');
            $('#markdown-editor').removeClass('hidden').val(content);
            $('#note-title').attr('contenteditable', 'true').addClass('border-b-2 border-blue-500/20 focus:outline-none');
            $('.save-btn, .cancel-btn').removeClass('hidden');
            $('#editBtn, #copyBtn, #shareBtn').addClass('hidden');
            $('.tags-editor').removeClass('hidden');
            // renderTags(true);
        }

        function disableEditing() {
            isEditing = false;
            $('.flex-toolbar').addClass('hidden');
            $('#markdown-content').removeClass('hidden');
            $('#markdown-editor').addClass('hidden');
            $('#note-title').attr('contenteditable', 'false').removeClass('border-b-2 border-blue-500/20');
            $('.save-btn, .cancel-btn').addClass('hidden');
            $('#editBtn, #copyBtn, #shareBtn').removeClass('hidden');
            $('.tags-editor').addClass('hidden');
            // renderTags(false);
        }

        function saveChanges() {
            const content = $('#markdown-editor').val();
            const title = $('#note-title').text();

            $.ajax({
                url: '/api/notes/' + noteId,
                type: 'PUT',
                data: JSON.stringify({
                    title,
                    content,
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                contentType: 'application/json',
                success: function(response) {
                    console.log('Sukces');
                    disableEditing();
                },
                error: function(xhr) {
                    console.error('Error:', xhr);
                }
            });
        }

        function cancelEditing() {
            content = originalContent;
            $('#markdown-content').html(DOMPurify.sanitize(marked.parse(content)));
            disableEditing();
        }

        function wrapSelectedText(before, after = before, multiline = false) {
            const textarea = $('#markdown-editor')[0];
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);

            let newText = selectedText;
            if (multiline) {
                if (before === '- ') {
                    newText = selectedText.split('\n')
                        .filter(line => line.trim())
                        .map(line => {
                            if (line.startsWith('- ')) {
                                return line.substring(2);
                            }
                            return '- ' + line;
                        })
                        .join('\n');
                }
            } else {
                const isWrapped = selectedText.startsWith(before) && selectedText.endsWith(after);
                newText = isWrapped
                    ? selectedText.slice(before.length, -after.length)
                    : before + selectedText + after;
            }

            textarea.setRangeText(newText, start, end);
            textarea.focus();

            content = textarea.value;
            $('#markdown-content').html(DOMPurify.sanitize(marked.parse(content)));
        }


        $('#boldBtn').click(() => wrapSelectedText('**'));
        $('#italicBtn').click(() => wrapSelectedText('*'));
        $('#listBtn').click(() => {
            const textarea = $('#markdown-editor')[0];
            const selection = textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);

            if (selection) {

                wrapSelectedText('- ', '- ', true);
            } else {
                const pos = textarea.selectionStart;
                const beforeText = textarea.value.substring(0, pos);

                const lastNewLine = beforeText.lastIndexOf('\n');
                const currentLine = beforeText.substring(lastNewLine + 1);

                let prefix = '\n- ';
                if (currentLine.startsWith('- ')) {
                    prefix = '\n  - ';
                }

                textarea.setRangeText(prefix, pos, pos);
                textarea.focus();
                content = textarea.value;
                $('#markdown-content').html(DOMPurify.sanitize(marked.parse(content)));
            }
        });
        $('#codeBtn').click(() => {
            const textarea = $('#markdown-editor')[0];
            const selection = textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);

            if (selection.includes('\n')) {
                wrapSelectedText('```\n', '\n```');
            } else {
                wrapSelectedText('`');
            }
        });

        $('#editBtn').click(enableEditing);
        $('.save-btn').click(saveChanges);
        $('.cancel-btn').click(cancelEditing);
        $('#shareBtn').click(async () => {
            const shareId = await $.ajax({
                url: '/api/notes/' + noteId + '/share',
                type: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                contentType: 'application/json',
                success: function (response) {
                    console.log(response);

                    navigator.clipboard.writeText(response.url);
                    const $btn = $('#shareBtn');
                    const originalHtml = $btn.html();
                    $btn.html('<span class="inline-block -translate-y-0.5">‚úì</span><span class="inline-block -translate-y-0.5">Skopiowano</span>')
                        .removeClass('bg-gray-50/80 hover:bg-white text-gray-700')
                        .addClass('bg-green-50 text-green-700 border-green-200');

                    setTimeout(() => {
                        $btn.html(originalHtml)
                            .addClass('bg-gray-50/80 hover:bg-white text-gray-700')
                            .removeClass('bg-green-50 text-green-700 border-green-200');
                    }, 2000);
                },
                error: function (xhr) {
                    console.error('Error generating share ID:', xhr);
                }
            });
        });

        $('#markdown-editor').on('input', function() {
            content = $(this).val();
            $('#markdown-content').html(DOMPurify.sanitize(marked.parse(content)));
        });

        $('#copyBtn').click(function() {
            navigator.clipboard.writeText(content);
            const $btn = $(this);
            const originalHtml = $btn.html();

            $btn.html('<span class="inline-block -translate-y-0.5">‚úì</span><span class="inline-block -translate-y-0.5">Skopiowano</span>')
                .removeClass('bg-gray-50/80 hover:bg-white text-gray-700')
                .addClass('bg-green-50 text-green-700 border-green-200');

            setTimeout(() => {
                $btn.html(originalHtml)
                    .addClass('bg-gray-50/80 hover:bg-white text-gray-700')
                    .removeClass('bg-green-50 text-green-700 border-green-200');
            }, 2000);
        });

        // $('.tags-input').on('input', function() {
        //     const query = $(this).val();
        //     renderTagSuggestions(query);
        // });
        //
        // $('.tags-input').on('keydown', function(e) {
        //     if (e.key === 'Enter') {
        //         e.preventDefault();
        //         const tagName = $(this).val().trim().toLowerCase();
        //         if (tagName) {
        //             addTag(tagName);
        //             $(this).val('');
        //             $('.tags-suggestions').addClass('hidden');
        //         }
        //     }
        // });

        // $(document).on('click', '.remove-tag', function(e) {
        //     e.preventDefault();
        //     const tagText = $(this).parent().text().trim().slice(0, -1);
        //     currentTags = currentTags.filter(tag => tag !== tagText);
        //     renderTags(true);
        // });

        // fetchAllTags();
        // renderTags();
    });
</script>